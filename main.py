import pickle
from time import sleep

from AI import *
from information import *
from markups import *
from musics import *


dotenv.load_dotenv('.env')

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
print('–ó–∞–ø—É—Å—Ç–∏–ª—Å—è')

dict_users = pickle.load(open('dict_users.txt', 'rb'))

def save_dict():
    pickle.dump(dict_users, open('dict_users.txt', 'wb'))

list_with_buttons = ['/start', '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§', '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–æ—Ä—Ç-–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ü§ñ', '–ú–æ–π –ò–ú–¢ üí™', '–°–ø–æ—Ä—Ç –≤ –°—É—Ä–≥—É—Ç–µ üèôÔ∏è',
                     '–ü–æ–¥–æ–±—Ä–∞—Ç—å –º–Ω–µ —Å–ø–æ—Ä—Ç üîé', '–ú—É–∑—ã–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚ô´', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –≤–∏–¥–∞—Ö —Å–ø–æ—Ä—Ç–∞ ü§î', '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ']

def edit_info(message):
    bot.edit_message_text(chat_id=message.chat.id, message_id=
    dict_users[message.from_user.first_name]['last_info'].message_id, text=send_profile(
        dict_users[message.from_user.first_name]['name'],
        dict_users[message.from_user.first_name]['age'],
        dict_users[message.from_user.first_name]['gender'],
        dict_users[message.from_user.first_name]['height'],
        dict_users[message.from_user.first_name]['weight'],
        dict_users[message.from_user.first_name]['goal']), parse_mode='markdown', reply_markup=change_info_markup)

def edit_info_callback(callback):
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=
    dict_users[callback.from_user.first_name]['last_info'].message_id, text=send_profile(
        dict_users[callback.from_user.first_name]['name'],
        dict_users[callback.from_user.first_name]['age'],
        dict_users[callback.from_user.first_name]['gender'],
        dict_users[callback.from_user.first_name]['height'],
        dict_users[callback.from_user.first_name]['weight'],
        dict_users[callback.from_user.first_name]['goal']), parse_mode='markdown', reply_markup=change_info_markup)


@bot.message_handler(commands=['start'], content_types=['text'])
def start_message(message):
    if message.from_user.first_name not in dict_users:
        dict_users[message.from_user.first_name] = {}
        dict_users[message.from_user.first_name]['name'] = message.from_user.first_name
        dict_users[message.from_user.first_name]['age'] = '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        dict_users[message.from_user.first_name]['gender'] = '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        dict_users[message.from_user.first_name]['height'] = '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        dict_users[message.from_user.first_name]['weight'] = '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        dict_users[message.from_user.first_name]['goal'] = '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        dict_users[message.from_user.first_name]['last_message'] = message
        dict_users[message.from_user.first_name]['last_info'] = message.message_id
        dict_users[message.from_user.first_name]['achievements'] = []
        save_dict()
        bot.send_message(message.chat.id, introduction_message1, reply_markup=pluses_markup)
        sleep(0.5)
        bot.send_message(message.chat.id, 'üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –í—ã–±–∏—Ä–∞–π —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∞ –ø–∞–Ω–µ–ª–∏ —Å–Ω–∏–∑—É –∏ –ø–æ–≥–Ω–∞–ª–∏!', reply_markup=setup_markup())
    else:
        bot.send_message(message.chat.id, hello_message, reply_markup=setup_markup())

    bot.register_next_step_handler(message, check_message)


def check_message(message):
    if message.text == '/start':
        start_message(message)

    elif message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§':
        dict_users[message.from_user.first_name]['last_info'] = bot.send_message(message.chat.id, send_profile(dict_users[message.from_user.first_name]['name'],
                                                       dict_users[message.from_user.first_name]['age'],
                                                       dict_users[message.from_user.first_name]['gender'],
                                                       dict_users[message.from_user.first_name]['height'],
                                                       dict_users[message.from_user.first_name]['weight'],
                                                       dict_users[message.from_user.first_name]['goal']), parse_mode='markdown', reply_markup=change_info_markup)
        bot.send_message(message.chat.id, '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ ‚ÜòÔ∏è', reply_markup=setup_markup())
        bot.register_next_step_handler(message, check_message)

    elif message.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–æ—Ä—Ç-–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ü§ñ':
        bot.send_chat_action(message.chat.id, 'typing')
        bot.send_message(message.chat.id, ask_ai(message.from_user.first_name, '–ü—Ä–∏–¥—É–º–∞–π –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º'), reply_markup=setup_markup())
        bot.register_next_step_handler(message, message_ai)

    elif message.text == '–ú–æ–π –ò–ú–¢ üí™':
        if dict_users[message.from_user.first_name]['height'] != '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)' and dict_users[message.from_user.first_name]['weight'] != '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)':
            bmi = int(dict_users[message.from_user.first_name]['weight']) / (int(dict_users[message.from_user.first_name]['height']) / 100) ** 2
            answer = check_bmi(dict_users[message.from_user.first_name]['gender'], int(dict_users[message.from_user.first_name]['age']), int(dict_users[message.from_user.first_name]['height']), int(dict_users[message.from_user.first_name]['weight']))
            bot.send_message(message.chat.id, answer, parse_mode='markdown')
            bot.send_chat_action(message.chat.id, 'typing')
            bot.send_message(message.chat.id, ask_ai(message.from_user.first_name, f'–û—Ü–µ–Ω–∏ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –∏–º—Ç={bmi}, –º–æ–π –ø–æ–ª: {dict_users[message.from_user.first_name]['gender']}, –º–æ–π –≤–æ–∑—Ä–∞—Å—Ç {dict_users[message.from_user.first_name]['age']}'), reply_markup=setup_markup())
        else:
            bot.send_message(message.chat.id, f'–î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ò–ú–¢ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ', reply_markup=setup_markup())
        bot.register_next_step_handler(message, check_message)

    elif message.text == '–°–ø–æ—Ä—Ç –≤ –°—É—Ä–≥—É—Ç–µ üèôÔ∏è':
        bot.send_message(message.chat.id, '–ö–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ø–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=category_markup)
        bot.send_message(message.chat.id, '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ ‚ÜòÔ∏è', reply_markup=setup_markup())
        bot.register_next_step_handler(message, check_message)

    elif message.text == '–ü–æ–¥–æ–±—Ä–∞—Ç—å –º–Ω–µ —Å–ø–æ—Ä—Ç üîé':
        if dict_users[message.from_user.first_name]['height'] == '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)' or \
            dict_users[message.from_user.first_name]['weight'] == '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)' or \
            dict_users[message.from_user.first_name]['gender'] == '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)' or \
            dict_users[message.from_user.first_name]['age'] == '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)':
            bot.send_message(message.chat.id, '–î–ª—è –ø–æ–¥–±–æ—Ä —Å–ø–æ—Ä—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ')
        else:
            mes = bot.send_message(message.chat.id, '–ü–µ—Ä–µ–±–∏—Ä–∞—é –≤—Å—ë –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
            bot.send_chat_action(message.chat.id, 'typing')
            answer = ask_ai(message.from_user.first_name, f'–Ø —Ç–µ–±–µ –¥–∞—é –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π —Å–ø–æ—Ä—Ç–∞ –≤ –°—É—Ä–≥—É—Ç–µ. –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {dict_users[message.from_user.first_name]['age']}, –≤–µ—Å: {dict_users[message.from_user.first_name]['weight']} –∫–≥, —Ä–æ—Å—Ç: {dict_users[message.from_user.first_name]['height']} —Å–º, –ø–æ–ª: {dict_users[message.from_user.first_name]['gender']}. –ò—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–±–µ—Ä–∏ —Å–µ–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞: {sport_in_surgut}. –ï—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –Ω–∏—á–µ–≥–æ —Ç–æ –ª–∏–±–æ —á—É—Ç—å-—á—É—Ç—å —Å–æ–≤—Ä–∏, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ. –ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∏ –ø–æ—á–µ–º—É –æ–Ω–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤ –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —á—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–ø–æ—Ä—Ç –≤ –°—É—Ä–≥—É—Ç–µ" –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–∏—à–∏ –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, –∞ –ø—Ä–æ—Å—Ç–æ —Ç–∏–ø–æ: –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –≤—Å—ë —á—Ç–æ –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥–∏—Ç. –ü–ò–®–ò –ë–ï–ó –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê –ü–†–û–°–¢–û –û–ë–´–ß–ù–´–ô –¢–ï–ö–°–¢')
            bot.delete_message(message.chat.id, mes.message_id)
            bot.send_message(message.chat.id, answer, reply_markup=setup_markup())
            bot.register_next_step_handler(message, check_message)

    elif message.text == '–ú—É–∑—ã–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ‚ô´':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:', reply_markup=music_markup)
        bot.register_next_step_handler(message, check_message)

    elif message.text == '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –≤–∏–¥–∞—Ö —Å–ø–æ—Ä—Ç–∞ ü§î':
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞, –æ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å:', reply_markup=facts_markup)
        bot.register_next_step_handler(message, check_message)

    elif message.text == '–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è üèÜ':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏:', reply_markup=achievement_markup)
        bot.register_next_step_handler(message, check_achievement)

    else:
        bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É —Ç–µ–±—è –ø–æ–Ω—è—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø–∞–Ω–µ–ª–∏ —Å–Ω–∏–∑—É', reply_markup=setup_markup())
        bot.register_next_step_handler(message, check_message)

def check_achievement(message):
    if message.text in list_with_buttons:
        check_message(message)
        return
    dict_users[message.from_user.first_name]['achievements'].append(message.text)
    bot.send_message(message.chat.id, '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ‚úÖ, –∞ —Å–µ–π—á–∞—Å –µ–≥–æ –æ—Ü–µ–Ω–∏—Ç –Ω–∞—à —ç–∫—Å–ø–µ—Ä—Ç')
    save_dict()
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(message.chat.id, ask_ai(message.from_user.first_name, f'–û—Ü–µ–Ω–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –º–æ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {message.text}, –º–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {dict_users[message.from_user.first_name]['age']}, –º–æ–π –≤–µ—Å: {dict_users[message.from_user.first_name]['weight']} –∫–≥, –º–æ–π —Ä–æ—Å—Ç: {dict_users[message.from_user.first_name]['height']} —Å–º, –º–æ–π –ø–æ–ª: {dict_users[message.from_user.first_name]['gender']}'))
    bot.register_next_step_handler(message, check_message)

def message_ai(message):
    if message.text in list_with_buttons:
        check_message(message)
    else:
        mes = bot.send_message(message.chat.id, '–£—Å–µ—Ä–¥–Ω–æ –¥—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...üìù')
        bot.send_chat_action(message.chat.id, 'typing')
        answer = ask_ai(message.from_user.first_name, message.text + f" –º–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {dict_users[message.from_user.first_name]['age']}, –º–æ–π –≤–µ—Å: {dict_users[message.from_user.first_name]['weight']} –∫–≥, –º–æ–π —Ä–æ—Å—Ç: {dict_users[message.from_user.first_name]['height']} —Å–º, –º–æ–π –ø–æ–ª: {dict_users[message.from_user.first_name]['gender']}")
        bot.delete_message(message.chat.id, mes.message_id)
        bot.send_message(message.chat.id, answer)
        bot.register_next_step_handler(message, message_ai)


@bot.message_handler(content_types=['text'])
def check_messages(message):
    if message.text in list_with_buttons:
        check_message(message)

@bot.callback_query_handler(func=lambda callback: True)
def check_call_data(callback):
    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if callback.data == 'info':
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=information_markup)
        bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if callback.data == 'age':
        dict_users[callback.from_user.first_name]['last_message'] = bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')
        bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        bot.register_next_step_handler(callback.message, check_age)
    elif callback.data == 'gender':
        dict_users[callback.from_user.first_name]['last_message'] = bot.send_message(callback.message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:', reply_markup=gender_markup)
    elif callback.data == 'height':
        dict_users[callback.from_user.first_name]['last_message'] = bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç:')
        bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        bot.register_next_step_handler(callback.message, check_height)
    elif callback.data == 'weight':
        dict_users[callback.from_user.first_name]['last_message'] = bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å:')
        bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        bot.register_next_step_handler(callback.message, check_weight)
    elif callback.data == 'goal':
        dict_users[callback.from_user.first_name]['last_message'] = bot.send_message(callback.message.chat.id, '–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å?')
        bot.clear_step_handler_by_chat_id(chat_id=callback.message.chat.id)
        bot.register_next_step_handler(callback.message, check_goal)

    # –í—ã–±–æ—Ä –ø–æ–ª–∞
    if callback.data == 'male':
        dict_users[callback.from_user.first_name]['gender'] = '–ú—É–∂—Å–∫–æ–πüë®'
        bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        edit_info_callback(callback)
        save_dict()
        bot.send_message(callback.message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚úÖ')
    if callback.data == 'female':
        dict_users[callback.from_user.first_name]['gender'] = '–ñ–µ–Ω—Å–∫–∏–πüë©üèª'
        bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        edit_info_callback(callback)
        save_dict()
        bot.send_message(callback.message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚úÖ')

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª—é—Å–∞–º–∏ –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Ç–µ–ª–∞
    if callback.data == 'pluses':
        bot.send_message(callback.message.chat.id, introduction_message2, reply_markup=setup_markup())

    # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–æ—Ä—Ç–∞
    if callback.data == 'game':
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞:', reply_markup=game_markup)
    elif callback.data == 'athletics':
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞:', reply_markup=athletics_markup)
    elif callback.data == 'martial':
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞:', reply_markup=martial_markup)
    elif callback.data == 'season':
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞:', reply_markup=season_markup)
    elif callback.data == 'heavy':
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞:', reply_markup=heavy_markup)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–≥—Ä–æ–≤—ã–µ
    if callback.data == 'football':
        bot.send_message(callback.message.chat.id, football_info, parse_mode='markdown')
    elif callback.data == 'basketball':
        bot.send_message(callback.message.chat.id, basketball_info, parse_mode='markdown')
    elif callback.data == 'volleyball':
        bot.send_message(callback.message.chat.id, volleyball_info, parse_mode='markdown')
    elif callback.data == 'tennis':
        bot.send_message(callback.message.chat.id, tennis_info, parse_mode='markdown')
    elif callback.data == 'ice_hockey':
        bot.send_message(callback.message.chat.id, hockey_info, parse_mode='markdown')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞—Ç–ª–µ—Ç–∏–∫–∞
    if callback.data == 'run':
        bot.send_message(callback.message.chat.id, running_info, parse_mode='markdown')
    elif callback.data == 'yoga':
        bot.send_message(callback.message.chat.id, yoga_info, parse_mode='markdown')
    elif callback.data == 'gymnastics':
        bot.send_message(callback.message.chat.id, gymnastics_info, parse_mode='markdown')
    elif callback.data == 'dances':
        bot.send_message(callback.message.chat.id, dance_info, parse_mode='markdown')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ–µ–≤—ã–µ
    if callback.data == 'taekwondo':
        bot.send_message(callback.message.chat.id, taekwondo_info, parse_mode='markdown')
    elif callback.data == 'karate':
        bot.send_message(callback.message.chat.id, karate_info, parse_mode='markdown')
    elif callback.data == 'judo':
        bot.send_message(callback.message.chat.id, judo_info, parse_mode='markdown')
    elif callback.data == 'boxing':
        bot.send_message(callback.message.chat.id, muay_thai_info, parse_mode='markdown')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–∑–æ–Ω–Ω—ã–µ
    if callback.data == 'ski':
        bot.send_message(callback.message.chat.id, ski_info, parse_mode='markdown')
    elif callback.data == 'snowboard':
        bot.send_message(callback.message.chat.id, snowboard_info, parse_mode='markdown')
    elif callback.data == 'bycycle':
        bot.send_message(callback.message.chat.id, cycling_info, parse_mode='markdown')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—è–∂—ë–ª–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞
    if callback.data == 'powerlifting':
        bot.send_message(callback.message.chat.id, powerlifting_info, parse_mode='markdown')
    elif callback.data == 'heavy_athletics':
        pass
    elif callback.data == 'rocking_chair':
        bot.send_message(callback.message.chat.id, fitness_clubs_info, parse_mode='markdown')

    # –í—ã–±–æ—Ä –º—É–∑—ã–∫–∏
    if callback.data == 'popular':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id, '–í–æ—Ç —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∂–∞–Ω—Ä–∞ "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –º—É–∑—ã–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"', reply_markup=popular_playlist)
        for music in send_popular_music():
            bot.send_audio(callback.message.chat.id, music)
    elif callback.data == 'crossfit':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id, '–í–æ—Ç —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∂–∞–Ω—Ä–∞ "Crossfit"', reply_markup=crossfit_playlist)
        for music in send_crossfit_music():
            bot.send_audio(callback.message.chat.id, music)
    elif callback.data == 'yoga_music':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id, '–í–æ—Ç —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∂–∞–Ω—Ä–∞ "–ô–æ–≥–∞ (—Å–ø–æ–∫–æ–π–Ω–∞—è)"', reply_markup=yoga_music_playlist)
        for music in send_yoga_music():
            bot.send_audio(callback.message.chat.id, music)
    elif callback.data == 'for_gym':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id, '–í–æ—Ç —Ç–æ–ø-10 —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∂–∞–Ω—Ä–∞ "–ü–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Å–ø–æ—Ä—Ç–∑–∞–ª–∞"', reply_markup=for_gym_playlist)
        for music in send_gym_music():
            bot.send_audio(callback.message.chat.id, music)

    # –í—ã–±–æ—Ä —Ñ–∞–∫—Ç–æ–≤
    if callback.data == 'football_fact':
        bot.send_message(callback.message.chat.id, football_facts, parse_mode='markdown')
    elif callback.data == 'basketball_fact':
        bot.send_message(callback.message.chat.id, basketball_facts, parse_mode='markdown')
    elif callback.data == 'volleyball_fact':
        bot.send_message(callback.message.chat.id, volleyball_facts, parse_mode='markdown')
    elif callback.data == 'tennis_fact':
        bot.send_message(callback.message.chat.id, tennis_facts, parse_mode='markdown')
    elif callback.data == 'ice_hockey_fact':
        bot.send_message(callback.message.chat.id, hockey_facts, parse_mode='markdown')
    elif callback.data == 'taekwondo_fact':
        bot.send_message(callback.message.chat.id, taekwondo_facts, parse_mode='markdown')
    elif callback.data == 'karate_fact':
        bot.send_message(callback.message.chat.id, karate_facts, parse_mode='markdown')
    elif callback.data == 'ski_fact':
        bot.send_message(callback.message.chat.id, ski_facts, parse_mode='markdown')
    elif callback.data == 'snowboard_fact':
        bot.send_message(callback.message.chat.id, snowboard_facts, parse_mode='markdown')

    if callback.data == 'achievement':
        achievement_message = '–ú–û–ò –î–û–°–¢–ò–ñ–ï–ù–ò–Ø üèÜ\n\n'
        for i, achievement in enumerate(dict_users[callback.from_user.first_name]['achievements']):
            achievement_message += str(i + 1) + '. ' + achievement + '\n'
        bot.send_message(callback.message.chat.id, achievement_message)

def check_age(message):
    if message.text in list_with_buttons:
        check_message(message)
        return

    if message.text and message.text.isdigit():
        if 1 <= int(message.text) <= 125:
            dict_users[message.from_user.first_name]['age'] = message.text
            bot.delete_message(message.chat.id, dict_users[message.from_user.first_name]['last_message'].message_id)
            bot.delete_message(message.chat.id, message.message_id)
            edit_info(message)
            save_dict()
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚úÖ')
            bot.register_next_step_handler(message, check_message)
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç, —ç—Ç–æ –≤–∞–∂–Ω–æ —Ç. –∫. –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
            bot.register_next_step_handler(message, check_age)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º')
        bot.register_next_step_handler(message, check_age)

def check_height(message):
    if message.text in list_with_buttons:
        check_message(message)
        return

    if message.text and message.text.isdigit():
        if 20 <= int(message.text) <= 220:
            dict_users[message.from_user.first_name]['height'] = message.text
            bot.delete_message(message.chat.id, dict_users[message.from_user.first_name]['last_message'].message_id)
            bot.delete_message(message.chat.id, message.message_id)
            edit_info(message)
            save_dict()
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚úÖ')
            bot.register_next_step_handler(message, check_message)
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–æ—Å—Ç, —ç—Ç–æ –≤–∞–∂–Ω–æ —Ç. –∫. –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
            bot.register_next_step_handler(message, check_height)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º')
        bot.register_next_step_handler(message, check_height)

def check_weight(message):
    if message.text in list_with_buttons:
        check_message(message)
        return

    if message.text and message.text.isdigit():
        if 5 <= int(message.text) <= 350:
            dict_users[message.from_user.first_name]['weight'] = message.text
            bot.delete_message(message.chat.id, dict_users[message.from_user.first_name]['last_message'].message_id)
            bot.delete_message(message.chat.id, message.message_id)
            edit_info(message)
            save_dict()
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚úÖ')
            bot.register_next_step_handler(message, check_message)
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–µ—Å, —ç—Ç–æ –≤–∞–∂–Ω–æ —Ç. –∫. –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
            bot.register_next_step_handler(message, check_weight)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º')
        bot.register_next_step_handler(message, check_weight)

def check_goal(message):
    if message.text in list_with_buttons:
        check_message(message)
        return

    if message.text:
        bot.delete_message(message.chat.id, dict_users[message.from_user.first_name]['last_message'].message_id)
        bot.delete_message(message.chat.id, message.message_id)
        mes = bot.send_message(message.chat.id, '–û—Ü–µ–Ω–∏–≤–∞—é –≤–∞—à—É —Ü–µ–ª—å...üìù')
        bot.send_chat_action(message.chat.id, 'typing')
        bot.send_message(message.chat.id, ask_ai(message.from_user.first_name, f'–û—Ü–µ–Ω–∏ –º–æ—é —Ü–µ–ª—å: {message.text}'))
        bot.delete_message(message.chat.id, mes.message_id)
        edit_info(message)
        dict_users[message.from_user.first_name]['goal'] = message.text
        save_dict()
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã‚úÖ')
        bot.register_next_step_handler(message, check_message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å')
        bot.register_next_step_handler(message, check_goal)


if __name__ == '__main__':
    bot.infinity_polling()