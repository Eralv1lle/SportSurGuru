import telebot
import pickle
from time import sleep

from AI import *
from information import *


API = '7584710593:AAHz-j_wQPtoYKpnwztoknFuZTom4jVqF_A'
bot = telebot.TeleBot(API)
print('–ó–∞–ø—É—Å—Ç–∏–ª—Å—è')

dict_users = pickle.load(open('dict_users.txt', 'rb'))


def save_dict():
    pickle.dump(dict_users, open('dict_users.txt', 'wb'))


markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
profile_btn = telebot.types.KeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüë§')
ai_btn = telebot.types.KeyboardButton(text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–æ—Ä—Ç-–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ü§ñ')
imt_btn = telebot.types.KeyboardButton(text='–ú–æ–π –ò–ú–¢üí™')
sport_btn = telebot.types.KeyboardButton(text='–°–ø–æ—Ä—Ç –≤ –°—É—Ä–≥—É—Ç–µüèôÔ∏è')
my_sport = telebot.types.KeyboardButton(text='–ü–æ–¥–æ–±—Ä–∞—Ç—å –º–Ω–µ —Å–ø–æ—Ä—Çüîé')
markup.add(profile_btn, imt_btn)
markup.add(sport_btn, my_sport)
markup.add(ai_btn)

information_markup = telebot.types.InlineKeyboardMarkup()
age_btn = telebot.types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', callback_data='age')
gender_btn = telebot.types.InlineKeyboardButton(text='–£–∫–∞–∑–∞—Ç—å –ø–æ–ª', callback_data='gender')
height_btn = telebot.types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ—Å—Ç', callback_data='height')
weight_btn = telebot.types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å', callback_data='weight')
goal_btn = telebot.types.InlineKeyboardButton(text='–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª—å', callback_data='goal')
information_markup.add(age_btn, gender_btn)
information_markup.add(height_btn, weight_btn)
information_markup.add(goal_btn)

gender_markup = telebot.types.InlineKeyboardMarkup()
male = telebot.types.InlineKeyboardButton(text='–ú—É–∂—Å–∫–æ–πüë®', callback_data='male')
female = telebot.types.InlineKeyboardButton(text='–ñ–µ–Ω—Å–∫–∏–πüë©üèª', callback_data='female')
gender_markup.add(male, female)

pluses_markup = telebot.types.InlineKeyboardMarkup()
btn = telebot.types.InlineKeyboardButton(text='–ö–∞–∫–æ–≤—ã –ø–ª—é—Å—ã —Ö–æ—Ä–æ—à–µ–≥–æ —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏—è?', callback_data='pluses')
pluses_markup.add(btn)

change_info_markup = telebot.types.InlineKeyboardMarkup()
change_info_markup_btn = telebot.types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µüìã', callback_data='info')
change_info_markup.add(change_info_markup_btn)

category_markup = telebot.types.InlineKeyboardMarkup()
game = telebot.types.InlineKeyboardButton(text='–ò–≥—Ä–æ–≤—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞', callback_data='game')
martial = telebot.types.InlineKeyboardButton(text='–ë–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞', callback_data='martial')
athletics = telebot.types.InlineKeyboardButton(text='–õ—ë–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞', callback_data='athletics')
season = telebot.types.InlineKeyboardButton(text='–°–µ–∑–æ–Ω–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞', callback_data='season')
heavy = telebot.types.InlineKeyboardButton(text='–¢—è–∂—ë–ª—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞', callback_data='heavy')
category_markup.add(game)
category_markup.add(athletics)
category_markup.add(martial)
category_markup.add(season)
category_markup.add(heavy)

list_with_buttons = ['/start', '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüë§', '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–æ—Ä—Ç-–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ü§ñ',
                     '–ú–æ–π –ò–ú–¢üí™', '–°–ø–æ—Ä—Ç –≤ –°—É—Ä–≥—É—Ç–µüèôÔ∏è', '–ü–æ–¥–æ–±—Ä–∞—Ç—å –º–Ω–µ —Å–ø–æ—Ä—Çüîé']

@bot.message_handler(commands=['start'], content_types=['text'])
def start_message(message):
    if message.from_user.first_name not in dict_users:
        dict_users[message.from_user.first_name] = {}
        dict_users[message.from_user.first_name]['name'] = message.from_user.first_name
        dict_users[message.from_user.first_name]['age'] = '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        dict_users[message.from_user.first_name]['gender'] = '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        dict_users[message.from_user.first_name]['height'] = '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        dict_users[message.from_user.first_name]['weight'] = '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        dict_users[message.from_user.first_name]['goal'] = '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
        bot.send_message(message.chat.id, introduction_message1, reply_markup=pluses_markup)
        sleep(.5)
        bot.send_message(message.chat.id, 'üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –í—ã–±–∏—Ä–∞–π —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∞ –ø–∞–Ω–µ–ª–∏ —Å–Ω–∏–∑—É –∏ –ø–æ–≥–Ω–∞–ª–∏!', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, hello_message, reply_markup=markup)

    bot.register_next_step_handler(message, check_message)


def check_message(message):
    if message.text == '/start':
        start_message(message)
    elif message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüë§':
        bot.send_message(message.chat.id, send_profile(dict_users[message.from_user.first_name]['name'],
                                                       dict_users[message.from_user.first_name]['age'],
                                                       dict_users[message.from_user.first_name]['gender'],
                                                       dict_users[message.from_user.first_name]['height'],
                                                       dict_users[message.from_user.first_name]['weight'],
                                                       dict_users[message.from_user.first_name]['goal']), parse_mode='markdown', reply_markup=change_info_markup)

        bot.register_next_step_handler(message, check_message)
    elif message.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–æ—Ä—Ç-–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ü§ñ':
        bot.send_chat_action(message.chat.id, 'typing')
        bot.send_message(message.chat.id, ask_ai(message.from_user.first_name, '–ü—Ä–∏–¥—É–º–∞–π –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å –Ω–µ–±–æ–ª—å—à–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º'))
        bot.register_next_step_handler(message, message_ai)
    elif message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–π –ò–ú–¢':
        if dict_users[message.from_user.first_name]['height'] != '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)' and dict_users[message.from_user.first_name]['weight'] != '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)':
            IMT = int(dict_users[message.from_user.first_name]['weight']) / (int(dict_users[message.from_user.first_name]['height']) / 100) ** 2
            answer = check_IMT(IMT).lower()
            bot.send_message(message.chat.id, f'–í–∞—à –ò–ú–¢ —Ä–∞–≤–µ–Ω: *{round(IMT, 2)}*\n\n–î–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ò–ú–¢ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: *{answer}*\n\n–ê —Ç–∞–∫–∂–µ —Å–µ–π—á–∞—Å –≤–∞—à –ò–ú–¢ –æ—Ü–µ–Ω–∏—Ç –Ω–∞—à —ç–∫—Å–ø–µ—Ä—Ç', parse_mode='markdown')
            bot.send_message(message.chat.id, ask_ai(message.from_user.first_name, f'–û—Ü–µ–Ω–∏ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –∏–º—Ç={IMT}'))
        else:
            bot.send_message(message.chat.id, f'–î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ò–ú–¢ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ')
        bot.register_next_step_handler(message, check_message)
    elif message.text == '–°–ø–æ—Ä—Ç –≤ –°—É—Ä–≥—É—Ç–µüèôÔ∏è':
        bot.send_message(message.chat.id, '–ö–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ø–æ—Ä—Ç–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=category_markup)

def message_ai(message):
    if message.text in list_with_buttons:
        check_message(message)
    else:
        mes = bot.send_message(message.chat.id, '–£—Å–µ—Ä–¥–Ω–æ –¥—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...üìù')
        bot.send_chat_action(message.chat.id, 'typing')
        answer = ask_ai(message.from_user.first_name, message.text)
        bot.delete_message(message.chat.id, mes.message_id)
        bot.send_message(message.chat.id, answer)
        bot.register_next_step_handler(message, message_ai)


@bot.callback_query_handler(func=lambda callback: True)
def check_call_data(callback):
    if callback.data == 'age':
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')
        bot.register_next_step_handler(callback.message, check_age)
    if callback.data == 'gender':
        bot.send_message(callback.message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:', reply_markup=gender_markup)
    if callback.data == 'height':
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç:')
        bot.register_next_step_handler(callback.message, check_height)
    if callback.data == 'weight':
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å:')
        bot.register_next_step_handler(callback.message, check_weight)
    if callback.data == 'goal':
        bot.send_message(callback.message.chat.id, '–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å?')
        bot.register_next_step_handler(callback.message, check_goal)

    if callback.data == 'male':
        dict_users[callback.from_user.first_name]['gender'] = '–ú—É–∂—Å–∫–æ–πüë®'
        bot.send_message(callback.message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    if callback.data == 'female':
        dict_users[callback.from_user.first_name]['gender'] = '–ñ–µ–Ω—Å–∫–∏–πüë©üèª'
        bot.send_message(callback.message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')

    if callback.data == 'pluses':
        bot.send_message(callback.message.chat.id, introduction_message2, reply_markup=markup)

    if callback.data == 'info':
        bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', reply_markup=information_markup)

def check_age(message):
    if message.text in list_with_buttons:
        check_message(message)
        return
    if message.text and message.text.isdigit():
        if 1 <= int(message.text) <= 125:
            dict_users[message.from_user.first_name]['age'] = message.text
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            bot.register_next_step_handler(message, check_message)
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç, —ç—Ç–æ –≤–∞–∂–Ω–æ —Ç. –∫. –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
            bot.register_next_step_handler(message, check_age)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º')
        bot.register_next_step_handler(message, check_age)


def check_height(message):
    if message.text in list_with_buttons:
        check_message(message)
        return
    if message.text and message.text.isdigit():
        if 1 <= int(message.text) <= 220:
            dict_users[message.from_user.first_name]['height'] = message.text
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            bot.register_next_step_handler(message, check_message)
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–æ—Å—Ç, —ç—Ç–æ –≤–∞–∂–Ω–æ —Ç. –∫. –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
            bot.register_next_step_handler(message, check_height)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º')
        bot.register_next_step_handler(message, check_height)


def check_weight(message):
    if message.text in list_with_buttons:
        check_message(message)
        return
    if message.text and message.text.isdigit():
        if 5 <= int(message.text) <= 350:
            dict_users[message.from_user.first_name]['weight'] = message.text
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            bot.register_next_step_handler(message, check_message)
        else:
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–µ—Å, —ç—Ç–æ –≤–∞–∂–Ω–æ —Ç. –∫. –º—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
            bot.register_next_step_handler(message, check_weight)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–º')
        bot.register_next_step_handler(message, check_weight)


def check_goal(message):
    if message.text in list_with_buttons:
        check_message(message)
        return
    if message.text:
        bot.send_message(message.chat.id, ask_ai(message.from_user.first_name, f'–û—Ü–µ–Ω–∏ –º–æ—é —Ü–µ–ª—å: {message.text}'))
        dict_users[message.from_user.first_name]['goal'] = message.text
        bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        bot.register_next_step_handler(message, check_message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—å')
        bot.register_next_step_handler(message, check_goal)

bot.infinity_polling()